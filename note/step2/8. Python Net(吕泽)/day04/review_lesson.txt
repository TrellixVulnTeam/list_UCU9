review lesson1
python基础语法：
１．数据类型
    整型数 int
    浮点型数 float
    复数 complex
    布尔型数 bool(True/False)
    空值对象 None(是一个特殊空值不能理解为０，因为０是有意义的)
２．表达式
    定义：
    　　 由一个数字或数字和运算符组合而成,用括号() 可以将表达式分组,()内部的表达式先进行计算 
    作用：
    　　　让计算机做一些事情并返回结果  
３．算术运算符:
    + 加法
    - 减法
    * 乘法
    / 除法(除法得到的数是浮点型数,不会丢失小数部分)
    // 地板除( 除的结果去掉小数部分向下取整，注意正数和负数) 
    % 求余(即取模，注意正数和负数)
    ** 幂运算(pow())
４．运算符的优先级
    ** 优先
    * /  // % 其次
    + - 靠后
５．变量
   　１．定义：变量是关联一个对象的符号(标识符)
   　２．变量名的命名方法:
      　　１．变量名必须为字母或下划线开头,后跟字母或下划线或数字
      　　２．不能使用python的关键字(保留字)
    ３．python 的关键字：
        True  False  None is, del, if, elif, else ....
    4.在交互模式下查看当前作用域的所有变量
        >>> help("__main__")
６．基本输入输出函数
    １．基本输入函数 input
      1.作用：
        从标准输入设备上读取一个字符串
        末尾的换行字符会被删除
      2.格式:
        input("提示字符串")
      3.说明：
        返回输入的字符串（仅python3)
    ２．基本输出函数:
      1.作用：
        将一系列对象的值以字符串形式输出到标准输出设备上(默认为终端)
      2.格式:
        print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
        常用形式为：print(对象1, 对象2, 对象3, ...)
      3.关键字参数:
        sep:   两个值之间的分隔符,默认为一个空格' '
        end:   输入完毕后在流末尾自动追加一个字符串,默认为换行符'\n'
        file:  流对象，默认为 sys.stdout
        flush: 是否立即将流进行输出       
７．关联/绑定/引用
    １．含义
      python 中变量没有类型
      python 中一个变量一定与一个对象相关联
      关联/绑定/引用都是指变量和一个对象的关联关系
    ２．示例
      a = None  # a 绑定None
８．赋值语句
    １．语法：
      变量名 = 表达式
      或
      变量名1 = 变量名2 = 表达式
      或
      变量名1, 变量名2, ... = 序列
    ２．作用：
      １．没有此变量时，创建一个变量，同时将变量绑定到表达式返回的对象上
      ２．变量存在时，改变此变量关联的对象
      ３．用变量访问此变量关联的对象
    ３．说明:
      一个变量只能绑定一个对象
      多个不同的变量可以同时绑定在一个对象上
９．序列赋值
    １．语法:
      变量名1, 变量名2, ... = 对象1, 对象2, ...
      变量名1, 变量名2, ... = (对象1, 对象2, ...)
      变量名1, 变量名2, ... = [对象1, 对象2, ...]
      (变量名1, 变量名2, ...) = [对象1, 对象2, ...]
      [变量名1, 变量名2, ...] = (对象1, 对象2, ...)
    ２．示例：
      x, y = 100, 200  # x = 100; y = 200
      x, y = y, x  # 交换两个变量的绑定关系
10.id(obj) 函数
    作用：
      返回一个对象在内存中的地址
11.is 和 is not 运算符
    １．语法
      x is y
      或
      x is not y
    ２．作用：
      １．判断两个变量是否绑定同一个对象，当是同一对象时，返回True, 否则返回False
      ２．is not 的作用与is相反
    ３．判断一个对象是否绑定 None 通常用 is 运算符
      >>> a = None
      >>> a is None  # True
      >>> a is not None # False
    ４．注：
      CPython 整数-5 至 256 永远存在于内存中，不会释放并可重复使用
      示例：
        １．>>> a = 256
           >>> b = 256
           >>> id(a)   #10927584 
           >>> id(b)   #10927584,a和b的地址相同
           >>> print(a is b)  #True
        ２．>>> a = 257
           >>> b = 257
           >>> id(a)   #140006638694192 
           >>> id(b)   #140006614348016,a和b的地址不相同 
           >>> print(a is b)  #False
12.del 语句
    1.语法:
      del 变量名
    2.作用：
      用于删除(delete)变量，同时解除与对象的关联关系，如果可能则释放对象
13.复合赋值算术运算符:
    y += x    等同于  y = y + x
    y -= x    等同于  y = y - x
    y *= x    等同于  y = y * x
    y /= x    等同于  y = y / x
    y //= x   等同于  y = y // x
    y %= x    等同于  y = y % x
    y **= x   等同于  y = y ** x
14.比较运算符:
    <   小于
    <=  小于等于
    >   大于
    >=  大于等于
    ==  等于
    !=  不等于( <> 仅用于python2中)
    说明：
      比较运算符通常返回布尔类型的值
15.构造函数
    1.float(obj)  用字符串或数字转换为浮点数,如果不给出参数，则返回0.0
    2.int(x, base=10)  用字符串或数字转换为整数，如果不给出参数，则返回0
    3.complex(r=0.0, i=0.0) 用数字创建一个复数（实部为r, 虚部为i)
    4.bool(x)   用x创建一个布尔值(True/False)
        1.bool(x)通常用于显式获取x的布尔环境值
        2.False 布尔假值的情况有：
            ''  空字符串
            ()  空元组
            []  空列表
            {}  空字典
            set() 空集合
            所有的数字零(0, 0.0, 0+0j)
16.预置(内建)的 数值型函数
    1.abs(x)   
        取x的绝对值
    2.round(number[, ndigits]) 
        对数值进行四舍五入, ndigits是小数向右取整的位数，负数表示向左取整
    3.pow(x, y, z=None)  
        相当于 x ** y 或 x ** y % z
    4.注意：help() 是函数查看帮助
        >>> help(函数名) 查看函数的帮助
        >>> help(abs)<回车>
17.语句 (statements)
    １．定义：
        语句由一些表达式组成，通常一条语句可以独立执行来完成一部分事情并形成结果
    　　　　注：一条语句建议写在一行内，多条语句写在一行内需要用 分号(;) 分开
    ２．语句示例:
       print("hello world")  # 表达式语句
       x = 100 + 200  # 赋值语句
      　# 写在一行:
      　print("hello world"); x = 100 + 200
18.换行
    １．显式换行
      折行符 \ (反斜杠)
      注：折行符必须放在一行的末尾来示意解释执行器，下一行也是本行的语句
    ２．隐式换行
      所有的括号的内容换行不需要添加折行符，通常叫做隐式换行，如：() [] {}
19.if 语句
    １．语法    
        if 真值表达式1:
          语句块1
        elif 真值表达式2:
          语句块2
        elif 真值表达式3:
          语句块3
        ...
        else:
          语句块4
    ２．说明：
      1. elif 子句可以有0个，一个或多个
      2. else 子句最多只能有一个，也可以没有，且只能放在最后
      3.　各真值表达式自上而下执行判断，如果其中一个为True时，执行其中的语句块后结束此if语句的执行
      4. 以上所有真值表达式为False时才执行else子句
    ３．if语句的嵌套:
        # 输入一个学生的成绩 [0~100]  如果超出范围提示不合法
        # 否则分 优，良，及格和不及格打印学生信息
        s = input("请输入学生成绩: ")
        score = int(s)
        if 0 <= score <= 100:
            print("输入的成绩合法")
            if score >= 90:
                print("成绩优良")
            elif score >= 80:
                print("成绩良好")
            elif score >= 60:
                print("成绩及格")
            else:
                print("成绩不及格")
        else:
            print("输入的成绩不合法")
    ４．条件表达式
        １．语法:
          表达式1 if 真值表达式 else 表达式2
        ２．作用：
          如果真值表达式的布尔环境值为True时，执行表达式1 并返回结果的引用关系，否则执行表达式2并返回结果的引用关系
        ３．示例：
            # 输入一个数，打印这个数的绝对值

            s = input("请输入一个数: ")
            a = float(s)
            a = a if a > 0 else -a   #条件表达式
            print("绝对值是:", a)
20.pass 语句
    1.作用：
        通常用来填充语法空白
        pass 又名空语句
    2.语法:
        pass
    3.示例：
        score = int(input("请输入学生成绩: "))
        if 0 <= score <= 100:
            pass
        else:
            print("学生成绩不合法")
21.布尔运算(not and　or):
    １．运算符:
      not   and    or
   　２．布尔非操作 not 
        １．语法:
          not x
        ２．作用
          对 x 进行布尔取非
          如bool(x) 为True,则返回False ...
        ３．示例：
          not True # False
          not False # True
          not 100   # False
          not not 100 # True
    ３．布尔与操作 and
        １．语法:
          x and y
          注：x,y 代表表达式
        ２．作用：
          优先返回假值对象
          当x的布尔值为False时，返回x否则返回y
        ３．示例：
          True and True    # True
          True and False   # False
          False and True   # False
          False and False  # False
          a = 100
          b = 200
          a and b
    ４．布尔或操作 or
        １．语法:
          x or y
        ２．作用：
          优先返回真值对象
          当x为True时，返回x，否则返回y
        ３．示例：
          True or True   # True
          True or False  # True
          False or True  # True
          False or False # False
          100 or 200     # 100
          100 or 0       # 100
          0   or 200     # 200
          0   or 0.0     # 0.0
22.字符串 str
    1.作用：
      是用来记录文本信息
    2.空字符串:
      ''
      ""
      ''''''
      """"""
      注: 
        1.空字符串的布尔值为False
        2.单引号和双引号字符串的区别
            1.单引号字符串内可以包含双引号
            2.双引号字符串可以包含单引号
            3.示例：
                print("I'm a teacher!")
                print('My name is "weimingze"')
        3.三引号字符串
            1.三引号字符串中的换行会自动转换为换行符\n
            2.三引号可以表示函数或类的文档字符串
        　　　　3.示例：
                print("""welcome to beijing.
                I like python!""")
23.用转义序列代表特殊字符:
    字符串中常用字符 反斜框(\) 后跟一个字符代表特殊的含义
    \'  代表一个单引号
    \"  代表一个双引号
    \n  代表换行
    \\  代表一个反斜杠
    \r  返回光标至行首
    \f  换页
    \t  水平制表符
    \v  垂直制表符
    \b  倒退
    \a  响铃
    \0  空字符(字符值为零)
    \xXX 十六进制值
    \uXXXX Unicode 16的十六进制值
    \UXXXXXXXX Unicode 32的十六进制值
24.ASCII 编码：
    １．查询方法：
        $ man ascii<回车>
    ２．常用字符编码范围：
        　　　字符          十进制            十六进制
        'A' ~ 'Z'      65 ~ 90         0x41 ~ 0x5A
        'a' ~ 'z'      97 ~ 122        0x61 ~ 0x7A
        '0' ~ '9'      48 ~ 57         0x30 ~ 0x39
25.raw 字符串(原始字符串)
    1.格式:
      r'字符串内容'
      r"字符串内容"
      r'''字符串内容'''
      r"""字符串内容"""
    2.作用：
      让转义字符 \ 无效
26.字符串的算术运算:
    １．+  加号运算符用于拼接字符串 
    ２．+= 运算符用于原字符串与右侧字符串拼接生成新的字符串   
    ３．*  运算符用于生成重复的字符串 
    　　　>>>print("ABC" * 3)    #ABCABCABC
    ４．*= 生成重复的字符串并改变变量的绑定关系
27.字符串比较运算符:
    >
    >=
    <
    <=
    ==
    !=
28.in 和 not in 运算符
    １．作用：
      　　用于序列，字典，集合中，用于判断某个值是否存在于容器中
      　　not in 与 in 运算符返回结果相反
    ２．格式:
      　　象 in 序列
    ３．示例：
        s = 'welcome to terena!'
        't' in s  # True
        '#' in s  # False
        'to' in s  # True
        'hello' in s # False
        'hello' not in s # True
        'hello' in not s # 语法错误！
29.字符串的索引 index
    １．语法:
        字符串[整数值]
    ２．语法说明：
        python 序列都可以用索引(index) 来访问序列中的对象
        python 序列正向索引是从0开始的，第二个索引为1,...最后一个索引值为len(s)-1
        python 序列的反向索引是从-1开始的,-1代表最后一个，-2代表倒数第二个,以此类推, 
      　　　　　　　　　第一个是-len(s)
    

    ３．注意：
        １．python 字符串是不可以改变的字符序列
        ２．len(s) 函数，用于返回字符串序列的长度(整数)
    ４．示例：
        s = 'ABCDE'
        s[0] # 'A'
        s[1] # 'B'
        s[4] # 'E'
        s[5] # 越界错误 IndexError
        s[-1] # 'E'
        s[-2] # 'D'
        s[-5] # 'A'
        s[-8] # 越界
30.常用于序列的函数
    len(seq)        返回序列的长度
    max(x)          返回序列中元素的最大值
    min(x)          返回序列中元素的最小值
    sum(x)          返回序列中所有元素的和（元素必须是数值类型）
    any(x)          真值测试，如果列表中有一个值为真的元素则返回 True
    all(x)          真值测试，如果列表中所有元素都为真才返回 True
31.切片 slice
    １．作用：
        从字符串序列中取出相应的元素重新组成一个新的字符串
    ２．语法:
        字符串[(开始索引b):(结束索引e)(:(步长s))]
        注：小括号()括起的部分代表可省略
    ３．说明：
        1. 开始索引 是切片切取的起始位置
        2. 结束索引 是切片的终止点(但不包含终止点)
        3. 步长是切片每次获取完当前元素后移动的方向和偏移量
        1) 没有步长，相当于取值完成后向右移动一个索引的位置（默认为1)
        2) 当步长为正整数时，取正向切片,开始索引默认为0,结束索引默认为len(s)
        3) 当步长为负整数时，取反向切片，开始索引默认为最后一个元素。结束索引为第一个元素的前一个位置
    ４．示例：
        s = 'ABCDE'
        a = s[1:4]  # a = "BCD"
        a = s[:4]   # a = 'ABCD'
        a = s[1:]   # a = 'BCDE'
        a = s[:]    # a = 'ABCDE'
        a = s[3:3]  # a = ''
        a = s[4:2]  # a = ???
        a = s[0:5:2]  # a = 'ACE'
        a = s[0:5:3]  # a = 'AD'
        a = s[:3:2]   # a = 'AC'
        a = s[-2::-2]
        a = s[3::-1]  # a = 'DCBA'
32.字符编码转换函数:
    １．ord(c) 返回一个字符的Unicode编码值
    ２．chr(i) 返回i这个值所对应的字符
33.字符编码转换函数:
    ord(c) 返回一个字符的Unicode编码值
    chr(i) 返回i这个值所对应的字符
34.整数转换为字符串函数
    hex(i)  将整数转换为十六进制的字符串
    oct(i)  将整数转换为八进制的字符串
    bin(i)  将整数转换为二进制的字符串
35.字符串
    １．字符串构造函数
        str(obj='') 将对象转换为字符串
    ２．字符串方法的调用语法:
      　　对象.方法名(方法传参)
        示例：
          s = 'abc'
          print(s.isalpha())  # True
    ３．查看字符串所有方法
     　　 １．>>> help(str)<回车>
        ２．文档见:
          　　　python_base_docs/str_xxxx.html
36.字符串格式化表达式
    １．作用：
      　　生成一定格式的字符串
    ２．运算符:
      　　%
    ３．语法格式:
      　　格式化字符串 % 参数值
      　　或
      　　格式化字符串 % (参数值1, 参数值2, ...)
    ４．说明：
      　　格式化字符串中'%'为占位符，后跟类型码，占位符的位置将用参数值替换
    ５．示例：
      　　fmt = "name: %s, age: %d"
      　　n = "weimingze"
      　　a = 35
      　　print(fmt % (n, a))
37.占位符 % 和类型码之间的格式
　　　　１．语法
        %[-+0宽度.精度]x
        - 左对齐
        + 显示正负号
        0 补零
    ２．示例：
        "%10d" % 123   # '       123'
        "%-10d" % 123  # '123       '
        "%010d" % 123  # '0000000123'
        "%+10d" % 123  # '      +123'
        "%7.2f" % 3.1415926  # '   3.14'
