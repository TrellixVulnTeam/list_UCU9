1、数据类型
	1、基本数据类型
		1、number类型
			整数：
				var n1 = 123;
				var n2 = 0123;
				var n3 = 0x123;
			小数：
				var n1 = 123.456;
				var n2 = 123.4e10
		2、string类型
			由Unicode组成的字符，数字，标点
			1、查询字符的Unicode码
				"x".charCodeAt().toString(16)
			2、将Unicode码转换成对应的字符
				已知Unicode:5f20
				var c = "\u5f20";
			3、转义字符
				\n : 换行
				\t : 制表符
				\" : "
				\' : '
				\\ : \
		3、boolean 类型
			真 ：true
			假 ：false
		4、查看数据类型 - typeof() / typeof 
	2、引用数据类型
	3、数据类型转换
		1、隐式转换
			任意数据类型与字符串做加法操作，最后会将数据转换为字符串，再连接
		2、强制转换
			1、toString()
			2、parseInt()
			3、parseFloat()
			4、Number()
2、运算符
	1、算数运算符
		+，-，*，/，%，++，--
	2、关系运算符
		>,<,>=,<=,==,!=,===,!==
	3、逻辑运算符
		!,&&,||
	4、位运算符
		& : 判断奇偶性
		^ : 交换连个数字时
	5、条件运算符
		条件?表达式1 :表达式2;
	6、赋值运算符
		+=，*=，……
3、流程控制
	1、分支结构
		1、if 结构
			1、if(条件){ 语句块 }
			2、if(条件){ 语句块 }else{ 语句块 }
			3、
				if(条件1){
					语句块1
				}else if(条件2){
					语句块2
				}... ...else{
					语句块n
				}
		2、switch 结构
==================================================
1、分支结构
	1、if结构(略)
	2、switch结构
		1、作用
			等值判断
		2、语法
			switch(变量){
				case 值1:
					语句块1
					//break; //跳出switch结构 ，可选
				case 值2:
					语句块2
					break; //跳出switch结构 ，可选
				... ...
				default:
					语句块n
					/*所有case都未匹配上时，才执行default*/
			}
			注意：
				1、变量 和 case后的值的判断，采用 === 来判断的。
				2、break，如果省略break的话，则从匹配的case块开始，依次向下执行(执行下面所有case块的内容 或 default的内容),直到碰见break或执行结束为止
			练习：
				从弹框中录入1-7任意一个数字表示星期1~星期日
				输入1：今天吃红烧肉
				输入2：今天吃红烧鱼
				输入3：今天吃红烧王八
				输入4：今天吃红烧皮皮虾
				输入5：今天吃红烧排骨
				输入6：今天休息
				输入7：今天休息
				其他：输入有误!
2、循环结构
	1、作用
		重复的执行相同或相似的代码
	2、循环二要素
		1、循环条件
			循环从什么时候开始，到什么时候结束
		2、循环操作
			循环中要做的事情(要执行的代码)

		ex:
			1、控制台中输出100遍Hello World
				条件：从第1遍开始 到 第100遍结束
				操作：输出 Hello World
			2、打印 1-100 之间所有的数字
				条件：从第1遍开始 到 第100遍结束
				操作：输出 条件 的值
	3、while 循环
		1、语法
			while(循环条件){
				循环操作
			}

			流程：
				1、判断循环条件(boolean值/表达式)
				2、如果条件为真，则执行循环操作
					2.1 执行完操作后，再回来判断条件...
				3、如果条件为假，则退出循环
			ex:
				1、打印 100 遍 Hello World
					条件：从 1 开始 ，到 100 结束
					操作：打印 Hello World
				练习：
					1、打印 1-100 之间所有的数字
					2、计算 1-100 之间所有数字的和并打印输出
					3、打印 1-100 之间所有3的倍数的数字

					4、打印 2000 - 2050 之间所有的闰年
					5、将日期计算器更改为循环版本
	4、do ... while 循环
		语法：
			do{
				循环操作
			}while(循环条件);

			流程：
				1、先执行循环操作
				2、再判断循环条件
				3、如果条件为真，则继续执行循环操作，否则退出循环
		
		猜数字游戏：
			1、声明一个1-100之间的随机整数
				随机数:Math.random() 得到一个0-1之间的小数
				var r=parseInt(Math.random()*100)+1
			2、允许用户循环的录入数据，与随机数进行比较
				如果输入的数据比随机数大，提示猜大了
				如果输入的数据闭随机数小，提示猜小了
				否则：提示猜对了，退出游戏
				或者，用户输入 exit 也可以退出游戏
	5、循环的流程控制
		1、break
			跳出循环结构
		2、continue
			结束本次循环，继续执行下次循环

	6、for 循环
		1、while
			打印 1-100 之间所有的数字
			var i=1;//循环条件的初始化
			while(i <= 100){ //循环条件的判断
				console.log(i);//循环操作
				i++;//更新循环条件
			}
		2、for 循环 
			语法：
				for(表达式1;表达式2;表达式3){
					循环操作
				}
				表达式1：循环条件的初始化
				表达式2：循环条件的判断
				表达式3：更新循环条件
			流程：
				1、先执行表达式1,即循环条件初始化(执行1次)
				2、再判断表达式2的值，true 或 false
				3、如果为true，则执行循环操作
				   如果为false，则退出循环结构
				4、	执行完循环操作后，再执行表达式3
				5、再判断表达式2，同步骤2...


			练习：
				1、从弹框中随意输入一个数字，判断其是否为素数(质数)
					素数：只能被1和他自己整除的数字
				2、打印九九乘法表中的一行数据
					从弹框中随意输入一个数字，输入几，则打印第几行

					ex : 输入 3
					1*3=3 2*3=6 3*3=9

					console.log();
		3、循环嵌套
			允许在一个循环中再出现另一个循环
			for(var i=1;i<=10;i++){  // 外层循环
				for(var j=1;j<=10;j++){  //内层循环
					
				}
			}
			外层循环走一次，内层循环走一轮
3、函数 - function
	1、函数的声明
		function 函数名(参数){
			函数体
		}

		1、参数 
			参数列表，允许声明0或多个参数，多个参数的话，使用 , 隔开即可
		2、返回值
			返回值是可选的，如果需要返回值的话，通过 return 值 ; 进行返回

	2、函数调用
		在任意JS的合法位置处，都允许做函数调用
			函数名(参数列表);




作业：
	使用函数完成以下内容，通过一个按钮点击调用
	在函数内：
		1、分三次录入年，月，日
		2、计算该日是星期?
		前提：1900.1.1 是星期1


















1、打印以下图像
	*     第1行 1个*
	**    第2行 2个*
	***   第3行 3个*
	****  ... ...
	***** ... ...
2、
	   *      第1行 4个空格 1个*
		***     第2行 3个空格 3个*
	 *****    第3行 2个空格 5个*
	*******   第4行 1个空格 7个*
 *********  第5行 0个空格 9个*
  *******
	 *****
	  ***
		 *


	空格 ：5-行数
	**** ：2*行数-1

  




var year,month,day;
var totalDays=0;
switch(month-1){
	case 11:
		totalDays+= 30;
	case 10:
		totalDays += 31;
	case 9:
		totalDays += 30;
	... ...
}




要求循环的从弹框中录入数据，把录入的数据在打印在控制台上，直到输入exit为止







