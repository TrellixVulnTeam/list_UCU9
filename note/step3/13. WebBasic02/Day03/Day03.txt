1、分支结构
	1、switch 结构
		使用场合：等值判断
		语法：
			switch(变量){
				case 值1:
					语句块
					break; //可选，用于跳出switch结构
				case 值2:
					语句块
					break; //可选，用于跳出switch结构
				default:
					语句块n
					break;
			}

			switch(变量){
				case 值1:
				case 值2:
					....
					break;
			}
2、循环结构
	1、while 循环
		语法：
			while(条件){
				循环操作
				更新循环条件
			}
	2、do...while
		语法：
			do{
				循环操作
			}while(循环条件);
	3、for
		语法：
			for(表达式1;表达式2;表达式3){
				循环操作
			}
			表达式1:循环条件声明
			表达式2:循环条件判断
			表达式3:更新循环条件
	4、流程控制
		1、break
		2、continue
3、函数 - function
	1、声明
		function 函数名(参数列表){
			函数体
		}
		1、参数列表：
			可以由0或多个参数来组成，多个参数的话中间用 , 隔开
		2、返回值
			返回给函数调用者的一个值
			return 值;
	2、调用
		任意JS的合法位置处，通过
			函数名(参数列表);
		去实现函数的调用
作业 ：计算 year年 month月 的 day日是星期几
	1、计算1900年到year-1年天数 (整年相加)
	2、计算当年从1月开始，到month-1月为止的天数(整月相加)
	3、累加 day 
=================================================
1、函数
	1、由ES提供的函数
		在网页中无需声明，就可以直接使用
		已学：parseInt() / parseFloat() / Number()

		1、isNaN(value)
			判断value是否为非数字
				true:不是数字
				false:是数字
		2、eval()
			执行由字符串来表示的JS代码
	2、局部变量 与 全局变量
		1、全局变量
			一经声明后，在JS的任何位置处都能使用的变量就是全局变量
			1、
				<script>
					var uname = "sanfeng.zhang"; //全局变量
					function show(){
						console.log(uname); //输出 sanfeng.zhang
					}
				</script>
			2、
				<script>
					function show(){
						uname = 'sf.zh';//全局变量,容易出问题
					}
				</script>

			推荐：
				全局变量声明的时候
					1、使用 var 关键字
					2、一律放在<script>中，所有function之外
		2、局部变量
			使用var关键字，并且声明在 function 中的变量就是局部变量
			局部变量的作用域只在声明的函数内，出了函数就不能使用
2、数组
	1、什么是数组
		数组(Array)是一个用于保存批量数据的结构，即一个变量中允许保存多个数据。是按照线性结构的方式来保存数据的
	2、创建数组
		1、创建一个空数组
			var 数组名 = [];
		2、创建数组并初始化元素
			var 数组名 = [元素1,元素2,... ...];
		3、创建一个空数组
			var 数组名 = new Array();
		4、创建数组并初始化元素
			var 数组名 = new Array(元素1,元素2,... ...);

			练习：
				1、使用 [] 的方式创建一个数组并构建元素
					张无忌,张翠山,张三丰,金毛狮王
				2、使用 new 的方式创建一个数组并构建元素
					赵敏,殷素素,周芷若,金花婆婆
				3、在控制台中直接将两个数组进行打印
	3、数组的使用
		获取 或 设置数组中的元素，一律都使用下标
		下标范围：从0开始，到元素个数-1为止
		1、想获取数组中的第2个元素
			数组名[1]
		2、为数组元素赋值
			数组名[下标] = 值;
	4、获取数组的长度
		属性：length
		用法：数组名.length
			ex:
				var names = ["鸣人","佐助","小樱","卡卡西"];
				console.log(names.length);//4
		使用场合：
			1、配合循环，遍历数组中的每一个元素
			2、能够找到数组中，最新要插入元素的位置
				var names = ["鸣人","佐助","小樱","卡卡西"];
				
				names[names.length] = "纲手";
		练习：
			1、让用户循环的从弹框中录入数据，并将数据保存进一个数组中，直到输入 exit 为止(exit不存)。打印数组到控制台中
			2、声明一个数组(初始化若干整数)，查找该数组中的最大值
	5、关联数组
		1、什么是关联数组
			JS中数组分为索引数组 和 关联数组
				索引数组：由数字做下标
				关联数组：由字符串做下标
		2、声明和使用关联数组
			var names = [];

			names["xyj"] = "西游记";
			names["hlm"] = "红楼梦";
			names["shz"] = "水浒传";

			console.log(names["hlm"]);

		3、注意
			length 只能统计出索引数组的长度，而关联数组则不包含在内
		4、使用 for ... in 遍历数组
			能够遍历数组中所有的数字下标和字符串下标
			for(var 变量 in 数组){
				变量：数组中所有的数字下标和字符串下标
			}
	6、数组的常用API
		1、toString()
			作用：将数组转换为字符串并返回
		2、join(seperator)
			作用：返回一个由指定连接符连接的数组元素的字符串
			参数 seperator ：连接符
		3、concat(arr1,arr2,...)
			作用：拼接多个数组到一起,并返回拼接后的结果
			语法：arr.concat(arr1,arr2,...)
			注意：该函数并不会改变数组，而是返回拼接后的一个副本
		4、reverse()
			作用：反转
			语法：arr.reverse()
			注意：该函数会改变现有数组的结构
			练习：
				1、随意从弹框中输入一个数字
				2、将数字转换为二进制，并打印输出
		5、sort()
			1、作用
				对先用数组进行排序
				默认情况下，按照元素的Unicode码进行排序(升序)
			2、注意
				该函数会改变现有数组的内容

			3、允许通过自定义的排序函数来指定数字的排序规则
				语法：
					arr.sort(排序函数);
					1、指定排序函数
						var nums = [38,6,121,76,65,23,1128];

						function sortAsc(a,b){
							return b - a;
						}

						nums.sort(sortAsc);
		6、进出栈操作
			栈式操作：提供了快速操作数组头部或尾部的方法
			1、push()
				入栈，向数组的尾部添加新元素，并返回新数组的长度
				names.push("张无忌");
				等同于
				names[names.length] = "张无忌";
			2、pop()
				出栈，删除并返回数组尾部的元素
			3、unshift()
				向数组的头部增加新元素并返回新数组长度
			4、shift()
				删除并返回数组头部的元素
			练习：
				已知数组：
					names = ["张无忌","张翠山"];
				1、向names数组中追加 "张三丰"，并打印追加后数组的长度
				2、向names数组的头部，增加 "赵敏"，并打印新数组长度
				3、删除 names 中的最后一个元素 和 第一个元素
	7、二维数组
		1、什么是二维数组
			数组中的数组，在一个数组中的每个元素又是一个数组
		2、声明二维数组
			var names = [
				["贾乃亮","王宝强","陈羽凡"],
				["李小璐","马蓉","白百合"]
			];

			console.log(names[1][1]);
3、字符串 - string
	1、声明字符串
		var str1 = "字符串1";
		var str2 = String("字符串2");
		var str3 = new String("字符串3");
	2、length - 属性
		作用：返回当前字符串中字符的个数
	3、常用函数 - String API
		1、大小写转换函数
			1、toUpperCase()
				返回字符串的完全大写形式
			2、toLowerCase()
				返回字符串的完全小写形式
			ex:
				var str = "Hello World";
				console.log(str.toUpperCase());
				// HELLO WORLD
			练习：
				1、创建一个函数 testVilidateCode()
				2、创建四位随机验证码
					范围：0-9,A-Z,a-z
				3、在弹框中弹出四位验证码，并让用户同时输入一段数据
				4、忽略大小写比较生成的四位验证码 和 用户输入的数据
					相等提示，验证成功
					不相等提示，验证失败
		2、获取指定位置的字符 或 Unicode码
			1、charAt(index)
				返回指定下标位置处的字符
				var msg = "Hello World";
				var r = msg.charAt(6);
				r : W
			2、charCodeAt(index)
				返回指定下标位置处的字符的Unicode码(十进制)
				var msg = "Hello World";
				var r = msg.charCodeAt(6); 
				r : W的ASCII码
		3、检索字符串
			1、作用
				查询子字符串在指定字符串中的起始下标
			2、函数
				1、indexOf(value,fromIndex)
					value : 要查询的子字符串
					fromIndex : 从哪个位置处开始查，如果省略的话，则从头查找
					返回值：返回第一次出现子字符串的下标，如果未找到，则返回-1
				2、lastIndexOf(value,fromIndex)
					作用：查找value最后一次出现的下标
					注意：该函数的查找方式是从后向前找
				练习：
					1、从弹框中输入一个邮箱
					2、判断输入的数据是否满足邮箱的格式
						1、字符串必须包含@
						2、字符串必须包含.
						3、最后一个.的位置必须要在@之后
		4、截取子字符串
			函数：substring(start,end)
			作用：返回从start到end-1之间的子字符串，如果省略end的话，则截取到末尾

作业：
	1、声明一个数组，内容随意
	2、从弹框中录入一个数据
	3、判断录入的数据是否出现在数组中
		1、如果出现了的话，则打印数据的下标
		2、如果未出现，则提示该数据不存在










日	一	二	三	四	五	六
		1		2		3		4		5		6
7		8		9		10	11	12	13


