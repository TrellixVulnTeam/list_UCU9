人工智能
matlab+C/C++
numpy/scipy/matplotlib/sklearn/tensorflow/...
python
第一阶段：数据分析
第二阶段：机器学习
                     深度学习
                         强化学习
一、numpy入门
1.numpy是什么？
1)numpy是Numerical Python的缩写，意为“数值的Python”。
2)numpy是一整套开源科学计算库。
3)numpy弥补了作为通用编程语言的Python在数值计算方面，能力弱、速度慢的不足。
4)numpy拥有丰富的数学函数、强大的多维数组和优异的运算能力。
5)numpy与scipy、scikits、matplotlib等其它科学计算库可以很好地协调工作。
6)numpy可取代matlab和mathematica的功能，并允许用户进行快速交互式原型开发。
2.numpy的历史背景
1)1995年，numeric，早期的python语言数值计算库，如今已废弃；
2)2001年，scipy项目启动，所需要的新特性被实现于numarray中；
3)2005年，重构numeric，意图将numarray中的新特性整合到numeric中；
4)2006年，numpy独立于scipy正式发布，同时拥有numeric和numarray的全部特性。(Ver. 1.13)
3.为什么使用numpy？
1)同样的计算任务，使用numpy比纯python代码少得多；
2)存储效率和I/O性能远胜于python；
3)numpy的底层实现使用C语言甚至汇编语言，运行速度达到极限；
4)numpy是完全开源的，成本低且没有法律风险。
4.numpy的局限性
1)内置数据结构的通用性不及python，在科学计算以外的领域，numpy的优势并不明显；
2)numpy的模块是用C语言编写的，不支持jython。
5.numpy的安装
1)在线安装
python -m pip install numpy -- 安装纯numpy
numpy+mkl (Intel (R) Math Kernel Library)
2)离线安装
numpy-1.13.3+mkl-cp36-cp36m-win_amd64.whl
scipy-0.19.1-cp36-cp36m-win_amd64.whl
matplotlib-2.0.2-cp36-cp36m-win_amd64.whl
6.numpy核心――多维数组
代码：vector_sum.py
二、numpy基础
1.数组对象
1)numpy的数组是numpy.ndarray类型的对象，其中包括实际数据，以及描述这些数据的元数据，大部分针对数组的操作实际上仅仅是针对其元数据的操作，以此提升性能。
2)numpy数组的元素必须是同质的，即类型完全一致。
3)numpy数组的小标从0开始，最后一个元素的下标是数组长度减1。
4)numpy数组对象的dtype属性表示元素的数据类型。
5)numpy数组对象的shape属性表示数组的维度，通过一个tuple表现，其中的每一个元素即相应维度的大小。
numpy.arange(起始, 终止, 步长): 获得一个数组形式序列
numpy.array([元素1, 元素2, ...]): 获得一个包含给定元素的数组对象
2.下标访问
数组对象[第一维索引,第二维索引,...]
代码：shape.py
3.数据类型
1)python的内置类型
bool
int
float
complex
str
tuple
list
dict
set
2)numpy的内置类型
bool_
int8/int16/int32/int64 - int16: -32768, 32767
uint8/uint16/uint32/uint64 - uint16: 0, 65535
float16/float32/float64
complex64/complex128
str_
3)自定义类型
a = numpy.array([...], dtype=T)
t = numpy.dtype(T)
a = numpy.array([...], dtype=t)
A. T: python或numpy的内置类型
t = numpy.dtype(int)
t = numpy.dtype(numpy.int32)
B. T: 类型字符串
t = numpy.dtype('int')
t = numpy.dtype('int32')
C. T: 类型字符编码
t = numpy.dtype('>(2,3)4i4')
>：大端字节序
(2,3)：维度
4：分量数
i：分量类型
4：分量字节数
D. T: (变长类型, 长度)
t = numpy.dtype ((numpy.str_, 14))
E. T: (定长类型, 维度)
t = numpy.dtype ((int, 5))
F. T: 逗号分隔的多个类型字符串
t = numpy.dtype ('U14, i4')
G. T: [(名称,类型,维度),(字段描述),...]
t = numpy.dtype ([
  ('name',numpy.str_,14),('age',numpy.int32)])
4)numpy的类型字符码
布尔：?
有符号字节：b
无符号字节：B
整型：i/i2/i4/i8
无符号整型：u/u2/u4/u8
浮点：f2/f4/f8
复数：c8/c16
时间增量：m
时间：M
Python对象：O
字节序列形式的字符串：S或a
Unicode字符串：U
空类型：V
字节序：大端(高位低址)：>，小端(高位高址)：<
              自动(自动匹配硬件字节序)：=
4.切片
代码：slice.py
5.改变维度
1)视图变维
a = numpy.arange(1,  7) # [1 2 3 4 5 6]
b = a.reshape(2, 3) # [[1 2 3]
                                  #   [4 5 6]]
c = b.reshare (6) # [1 2 3 4 5 6]
d = b.ravel () # [1 2 3 4 5 6]
2)复制变维
e = b.flatten () # [1 2 3 4 5 6]
3)就地变维
a.shape = (2, 3) # [[1 2 3]
                            #   [4 5 6]]
a.resize ((3, 2))
4)视图转置
代码：reshape.py
6.组合
1)垂直组合
v = numpy.vstack ((u, d))
[u]
[d]
2)水平组合
h = numpy.hstack ((l, r))
[l][r]
3)行组合
r = numpy.row_stack ((u, d))
u: [1 2 3]
d: [4 5 6]
r :[[1 2 3]
     [4 5 6]]
4)列组合
c = numpy.column_stack ((l, r))
l: [1 2 3]
r: [4 5 6]
c: [[1 4]
     [2 5]
     [3 6]]
7.分割
1)垂直分割
u, m, d = numpy.vsplit (v, 3)
2)水平分割
l, m, r = numpy.hsplit(h, 3)
3)深度分隔
x, y = numpy.dsplit (d, 2)
代码：stack.py
8.numpy.ndarray类的更多属性
dtype - 元素类型
shape - 维度
ndim - 维数
size - 元素数
a: [1 2 3]
len(a) -> 3
a.size -> 3
b: [[1 2 3]
      [4 5 6]]
len(b) -> 2
b.size -> 6
itemsize - 每个元素的字节数
nbytes - 数组的总字节数
T - 转置视图
real - 复数数组的实部视图
imag - 复数数组的虚部视图
flat - 扁平迭代器
tolist - 转化为python列表
代码：attr.py
-----------------------------
三、numpy的通用函数
1.读取CSV文件
loadtxt(文件名,分隔符,
  usecols=(列索引表),unpack=True,dtype=元素类型,
  converters={列索引号:转换函数})
代码：cs.py
2.算数平均值
样本：S = [s1, s2, ..., sn]
算数平均值：m = (s1+s2+...+sn)/n
mean = numpy.mean(closing_prices)
代码：mean.py
3.加权平均值
样本：S = [s1, s2, ..., sn]
权重：W = [w1, w2, ..., wn]
归一化：N = [n1, n2, ..., nn], ni = wi/(w1+w2+...+wn)
加权平均：a = (s1w1+s2w2+...+snwn)/
                        (w1+w2+...+wn)
                    = s1n1+s2n2+...+snnn
vwap = numpy.average(closing_prices,weights=...)
成交量加权平均价格(VWAP, Volume Weighted Average 代码：vwap.py
Prices)
时间加权平均价格(TWAP)
代码：twap.py
4.最大值和最小值
numpy.max(数组)，返回数组中的最大值
numpy.min(数组)，返回数组中的最小值
numpy.maximum(数组1, 数组2, ...)
unmpy.minimum(数组1, 数组2, ...)
a
9 7 5 max:9
3 1 8 min: 1
6 6 1
b
9 7 9 maxmum: 9 7 9
2 1 4                    3 1 8
6 3 5                    6  6 5
代码：maxmin.py
练习：计算股票的价格波动范围：在一定时期内最高的最高价减去最低的最低价。
代码：range.py
5.中位数
将多个样本按大小顺序排列，居于中间位置的元素就是中位数。
       *
1 3 5 7 9

1 2 3 4 5 6
       ―
      3.5
(a[(size-1)/2]+a[size/2])/2
(a[2]+a[2])/2
(a[2]+a[3])/2
median = np.median(closing_prices)
6.几个统计指标
样本：[s1,s2, ...,sn]
均值：m=(s1+s2+...+sn)/n
离差：[d1,d2,...dn], di=si-m
离差方: [q1,q2,...,qn], qi=di^2
总体方差：p=(q1+q2+...+qn)/n
总体标准差：std=sqrt(p) <- 方均根
---------------------------------------
样本方差：p=(q1+q2+...+qn)/n-1
样本标准差：std=sqrt(p) <- 方均根
numpy.var(数组) -> 计算总体方差
numpy.std(数组) -> 计算总体标准差
股票收益率：
closing_prices: [c1,c2,c3,...,cn]
                               \/  \/
diff:                   [   d1,d2,...,dn-1]
收益率:               [   r1,r2,...,rn-1], ri=di/ci
numpy.std(收益率)
代码：returns.py
对数收益率：
closing_prices: [c1,c2,c3,...,cn]
log:                    [l1,l2,l3,...,ln]
                              \/ \/
对数收益率:        [   t1,t2,...,tn-1]
loga-logb = log(a/b)


股票波动率：
std(T)/menu(T)/(sqrt(1/trading_days))
7.移动平均数和数组卷积
N=3
              *  * *
      A B C D E F  G
0 0 a b c d e  0  0
------                    >         [1/3 1/3 1/3]
   ------
      ------
         ------
             ------
                -------
                    -------
C = (a+b+c)/3 = [a b c]x[1/3 1/3 1/3]
numpy.convolve(closing_prices, 卷积核, 'valid')
代码：conv.py
--------------------------------------------------------------
代码：volatility.py
代码：weekdays.py
代码：summary.py
8.平均真实波幅(ATR)
取最近N(=20)个交易日的最高价、最低价和前日收盘价：
hc = 当日最高价-前日收盘价
cl  = 前日收盘价-当日最低价
hl = 当日最高价-当日最低价
以上三个价差的最大值成为该交易日的真实波幅。
N个交易日的首日平均真实波幅取各交易日真实波幅的平均值。其它交易日按如下公式计算：
ATR[i]=(ATR[i-1]x(N-1)+TR[i])/N, i=1,2,...,N-1
代码：atr.py
代码：sma.py
9.布林带
布林带分为上中下三个轨道：
中轨：移动平均线
上轨：中轨+标准差x2
下轨：中轨-标准差x2
代码：sbb.py
10.线性模型
1)线性预测
a b c d e f (g)
aA + bB + cC = d \
bA + cB + dC = e  | -> [A B C]
cA + dB + eC = f  /
dA + eB + fC => g
代码：linearmodel.py
--------------------------------------------------------------
2)趋势线
kx + b = y
kx1 + b = y1
kx2 + b = y2
kx3 + b = y3
...
kxn + b = yn
/ x1 1\                / y1 \
| x2 1 |    / k \    |  y2  |
| x3 1 | x |     | = | y3  |
| ...     |    \ b /     | ...   |
\ xn 1/                \ yn /
--------   -----     -------
    a             x            b
numpy.linalg.lstsq (a, b) -> x
基准位：每天最高价、最低价和收盘价的平均值。
日价差：每天最高价和最低价之差。
支撑位：每天基准位下方一个价差。
阻力位：每天基准位上方一个价差。
分别用线性模型拟合基准位、支撑位和阻力位为三条直线，就得到所谓趋势线、支撑线和阻力线。
代码：trendline.py
11.ndarray对象的方法
1)clip：返回一个被修剪过的数组，原数组中所有比最大值大的元素都被设定为最大值，所有被最小值小的元素都被设定为最小值。
2)compress：返回一个根据给定条件筛选后的数组。
3)prod/cumprod：累乘
1 2 3 4 5
prod->1x2x3x4x5->120
cumprod->[1 2 6 24 120]
代码：ndarray.py
四、numpy的便捷函数
1.相关性
两组来自不同数据源随机样本：
a: [a1 a2 ... an]
b: [b1 b2 ... bn]
分别计算平均值：
ave(a) = (a1+a2+...+an)/n
ave(b) = (b1+b2+...+bn)/n
分别计算离差：
dev(a) = [a1 a2 ... an]-ave(a)
dev(b) = [b1 b2 ... bn]-ave(b)
分别计算方差：
var(a) = ave(dev(a)dev(a))=cov(a,a)
var(b) = ave(dev(b)dev(b))=cov(b,b)
分别计算标准差：
std(a) = sqrt(var(a))
std(b) = sqrt(var(b))
计算它们的协方差：
cov(a,b) = ave(dev(a)dev(b))
cov(b,a) = ave(dev(b)dev(a))
协方差矩阵：
   cov(a,a)            cov(a,b)
--------------     --------------
std(a)std(a)      std(a)std(b)

   cov(b,a)           cov(b,b)
--------------    ---------------
std(b)std(a)     std(b)std(b)
主对角线为1，辅对角线为相关系数。
相关系数：
coco(a,b) = cov(a,b)/(std(a)std(b)), [-1, 1]
coco(b,a) = cov(b,a)/(std(b)std(a)), [-1, 1]
相关系数的正负号表示同向相关还是反向相关，其绝对值的大小反映相关程度的强弱。
numpy.cov (a, b) -> 协方差矩阵的分子部分
cov(a,a) cov(a,b)
cov(b,a) cov(b,b)
numpy.corrcoef(a,b)->协方差矩阵，从其辅对角线上获得相关系数
代码：corr.py
2.多项式拟合
任何可微的函数都可以用一个N次多项式来拟合，而比N次幂更高阶的部分作为无穷小量而被忽略不计。
f(x)=p0x^n + p1x^n-1 + ... + pn
y1 = p0x1^4+p1x1^3+p2x1^2+p3x1+p4
y2 = x2...
y3 = x3...
y4 = x4...
fit_x: [x1 x2 ... x5] \ __________________\ [p0 p1 ... p4]
fit_y: [y1 y2 ... y5] / numpy.ployfit() /            |
                                               numpy.polyval() | poly_x
                                                                             v 
                                                                        poly_y
代码：poly.py
y = 5x^4+3x^3+17x^2+100x+21
y' = 5x^3+3x^2+17x+100 = 0
3.符号数组
numpy.sign()函数返回参数数组中每个元素的符号，分别用+1/-1/0表示。
a: [12 -21 18 0 32 -27 -66]
b = numpy.sign(a)
b: [1 -1 1 0 1 -1 -1]
代码：obv.py
4.矢量化
numpy.vectorize()函数可以将一个针对单个数值的处理函数变成针对数组的处理函数。
def fun (a, b, c):
    return a + b + c
A = np.arange(1, 101)
B = np.arange(101,201)
C = np.arange(201,301)
D = np.zeros(A.size)
for i, (a, b, c) in enumerate (zip (A, B, C)):
  D[i] = fun (a, b, c)
D = numpy.vectorize(fun)(A, B, C)
标量函数变成矢量函数。
代码：vec.py
代码：sim.py
































































































